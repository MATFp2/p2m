int i1, i2;
int *p1;     // tip promenljive p1 je pokazivac na int
int* p2, c;

// unutar fje
int a = 10;
int *p;

// operator referenciranja
p = &a;    // a ima vrednost 10, p pokazuje na a

a = 2;     // a ima vrednost 2

// operator dereferenciranja
*p = 3;    // a ima vrednost 3

// alijasovanje - preklapanje 
*p = *p + 4;

// 0 - ceo broj
// NULL - pokazivacka simbolicka konstanta

// nije preporucljivo konvertovanje izmedju razlicitih tipova pokazivaca
// void* 

int *q;
const int *q;   // pokazivac na celobrojnu konstantu -- ne smete da menjate *q
int * const q;  // konstantni pokazivac na celobrojnu promenljivu -- ne smete da menjate q
const int *const q;  //konst.pokazivac na celobrojnu  konst.


int a;
int *q1, *q2;

q1 = &a;

// plitko kopiranje
q2 = q1;   // kopija pokazivaca  --- isto kao q2 = &a

// duboko kopiranje

// rezervisete prostor za kopiju
int b;
// iskopirate sadrzaj
b = a;
//povezete novi pokazivac sa tim sadrzajem
q2 = &b;



int a[5];
int *b;

b = &a[0];




for(i=0; i<n; i++)
  a[i] = a[i]+2;

a[10] = 3; // potencijalni segm.f. i def.greska


----

int a[5] = {1,2,3,4,5};
int *b;
int x = 3;

a[2] = 2;

b = &x;

b[2] = 3;    // greska

// uvek morate da vodite racuna o granicama
// iskljucivo da pristupate delu memorije koji vam je dodeljen


int ispisi_niz(int a[], int n);
int ispisi_niz_p(int *a, int n);

a[0], a[1], a[2]
  p[0], p[1],p[2]




char *p = "programiranje";
char s[] = "programiranje";

int a[10][20];

a[v][k]
20*v+k

int *b[10];
